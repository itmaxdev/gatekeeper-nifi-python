import sys
import traceback
from asn1.sgsn_compiler import *

def decode_raw_sgsn(raw_data, filename):
    try:
        # The input file may contain multiple concatenated BER records.
        # Iterate over each BER element and decode them individually.

        records = []
        raw_records = list(iter_ber_elements(raw_data))
        # print(f"Found {len(raw_records)} BER elements in the input file.")
        for chunk in raw_records:
            # print(f"Decoding BER element of length {len(chunk)} bytes")
            decoded = decode_sgsn_file(chunk)
            pretty = pretty_decode(decoded)
            mapped_record = map_sgsn_record(pretty)
            # print(pretty)
            records.append(mapped_record)
        if not records:
            # fallback: try decoding whole blob as single record
            print("fallback: try decoding whole blob as single record")
            decoded = decode_sgsn_file(raw_data)
            pretty = pretty_decode(decoded)
            mapped_record = map_sgsn_record(pretty)
            records.append(mapped_record)
        print(f"Decoded {len(records)} records from the input file.")
        with open(f"output/{filename}_raw.txt", "w") as out_file:
            for record in records:
                out_file.write(str(record) + "\n")
        # clear_response = clean_nested(response)
        # normalized_records = normalize_sgsn_file(clear_response, filename, "Vodacom")
        # if normalized_records:
        #     for record in normalized_records:
        #         print(record)
        # else:
        #     print("No records found", file=sys.stderr)
        #     # sys.exit(1)
    except Exception as e:
        print(f"Error decoding: {e}", file=sys.stderr)
        traceback.print_exc()
        sys.exit(1)

def main():
    raw_data = sys.stdin.buffer.read()  # read bytes, not text
    # iter through all files in input_path
    filename = sys.argv[1] if len(sys.argv) > 1 else "nifi_input"

    decode_raw_sgsn(raw_data, filename)

if __name__ == "__main__":
    main()
